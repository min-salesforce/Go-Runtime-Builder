<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Page Generator</title>
    <link rel="stylesheet" href="/css/app.css">
    <style>
        .simple-form {
            max-width: 600px;
            margin: 2rem auto;
            padding: 2rem;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .form-group {
            margin-bottom: 1.5rem;
        }
        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #333;
        }
        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        .form-control:focus {
            outline: none;
            border-color: #0176d3;
            box-shadow: 0 0 0 2px rgba(1, 118, 211, 0.1);
        }
        .btn-primary {
            background: #0176d3;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            width: 100%;
        }
        .btn-primary:hover {
            background: #014486;
        }
        .page-header {
            text-align: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #f4f6f9;
        }
        .result-section {
            display: none;
            margin-top: 2rem;
            padding: 1rem;
            background: #f4f6f9;
            border-radius: 4px;
        }
        .result-section.show {
            display: block;
        }
        .success-message {
            color: #4caf50;
            font-weight: 600;
        }
        .error-message {
            color: #f44336;
            font-weight: 600;
        }
    </style>
</head>
<body>
    <header class="app-header">
        <nav class="navbar">
            <div class="navbar-brand">
                <a href="/" class="brand-link">
                    <span class="brand-icon">üèóÔ∏è</span>
                    <span class="brand-text">Go Runtime Builder</span>
                </a>
            </div>
            <div class="navbar-nav">
                <a href="/" class="nav-link">Home</a>
                <a href="/simple" class="nav-link active">Simple Generator</a>
            </div>
        </nav>
    </header>

    <main class="main-content">
        <div class="page-header">
            <h1>Simple Static Page Generator</h1>
            <p>Generate clean HTML pages following Salesforce design templates</p>
        </div>

        <div class="simple-form">
            <form id="simple-form">
                <div class="form-group">
                    <label class="form-label" for="pageType">Page Type *</label>
                    <select id="pageType" name="pageType" class="form-control" required>
                        <option value="">Choose page type</option>
                        <option value="feature">Feature Page</option>
                        <option value="feature-2" selected>Feature Page Builder</option>
                        <option value="feature-set-and-features">Feature Set Page</option>
                        <option value="solution-initial-setup">Solution Page</option>
                        <option value="agent-setup">Agent Page</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="name">Page Title *</label>
                    <input type="text" id="name" name="name" class="form-control" required 
                           placeholder="e.g., Authentication Suite, File Upload Manager">
                </div>

                <div class="form-group">
                    <label class="form-label" for="description">Description</label>
                    <textarea id="description" name="description" class="form-control" rows="3" 
                              placeholder="Brief description of what this feature or solution does"></textarea>
                </div>

                <div class="form-group">
                    <label class="form-label" for="featureBadge">Select Cloud *</label>
                    <select id="featureBadge" name="featureBadge" class="form-control" required>
                        <option value="">Choose cloud</option>
                        <option value="sales">Sales</option>
                        <option value="service">Service</option>
                        <option value="industries">Industries</option>
                        <option value="field-service">Field Service</option>
                        <option value="foundations">Foundations</option>
                        <option value="financial-services">Financial Services</option>
                        <option value="marketing">Marketing</option>
                        <option value="itsm">ITSM</option>
                        <option value="public-sector">Public Sector</option>
                        <option value="revenue-cloud">Revenue Cloud</option>
                        <option value="commerce">Commerce</option>
                        <option value="data">Data</option>
                        <option value="education">Education</option>
                        <option value="automotive">Automotive</option>
                        <option value="nonprofit">Nonprofit</option>
                        <option value="manufacturing">Manufacturing</option>
                        <option value="healthcare">Healthcare</option>
                        <option value="sentos">SentOS</option>
                    </select>
                    <small style="color: #666; font-size: 0.875rem;">Select the Salesforce cloud for this feature</small>
                </div>

                <div class="form-group">
                    <label class="form-label" for="screenshot">Screenshot (Optional)</label>
                    <input type="file" id="screenshot" name="screenshot" class="form-control" accept="image/*">
                    <small style="color: #666; font-size: 0.875rem;">Upload a screenshot to display in the header</small>
                </div>

                <button type="submit" class="btn-primary">Generate HTML Pages</button>
            </form>

            <div id="result-section" class="result-section">
                <h3>Generation Results</h3>
                <div id="result-content"></div>
            </div>
        </div>
    </main>

    <script>
        document.getElementById('simple-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = {
                setupType: formData.get('pageType'),
                metadata: {
                    name: formData.get('name'),
                    description: formData.get('description') || '',
                    featureBadge: formData.get('featureBadge')
                },
                assets: {
                    resources: {}
                }
            };

            // Handle screenshot upload
            const screenshot = formData.get('screenshot');
            if (screenshot && screenshot.size > 0) {
                // Convert to base64 for simple handling
                const reader = new FileReader();
                reader.onload = async function(e) {
                    data.assets.screenshotDataUrl = e.target.result;
                    data.assets.screenshotFileName = screenshot.name;
                    data.assets.screenshotFileSize = screenshot.size;
                    await generatePages(data);
                };
                reader.readAsDataURL(screenshot);
            } else {
                await generatePages(data);
            }
        });

        async function generatePages(data) {
            const resultSection = document.getElementById('result-section');
            const resultContent = document.getElementById('result-content');
            
            resultSection.classList.add('show');
            resultContent.innerHTML = '<p>Generating pages...</p>';

            try {
                const response = await fetch('/api/generate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    resultContent.innerHTML = `
                        <div class="success-message">
                            <p>‚úÖ Successfully generated ${result.generatedPages} pages!</p>
                            <p><strong>Title:</strong> ${result.name}</p>
                            <p><strong>Type:</strong> ${result.setupType}</p>
                            <p>Redirecting to your generated page...</p>
                        </div>
                    `;
                    
                    // Automatically redirect to the generated page after a brief delay
                    setTimeout(() => {
                        window.location.href = result.mainPath;
                    }, 2000);
                } else {
                    resultContent.innerHTML = `
                        <div class="error-message">
                            <p>‚ùå Generation failed: ${result.error}</p>
                        </div>
                    `;
                }
            } catch (error) {
                resultContent.innerHTML = `
                    <div class="error-message">
                        <p>‚ùå Error: ${error.message}</p>
                    </div>
                `;
            }
        }
    </script>
</body>
</html>
